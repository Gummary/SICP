(define (derive exp var)
  (cond ((number? exp) 0)
	((variable? exp) (if (same-variable? exp var) 1 0))
	(else ((get 'deriv (operator exp)) (operands exp)
					   var))))
(define (operator exp)
  (car exp))
(define (operands exp)
  (cdr exp))
;; b)

(define (install-sum-package)
  (define (addend exp) (car exp))
  (define (augend exp) (cadr exp))
  (define (make-sum x y) 
    (cond ((=number? x 0) y)
	  ((=number? y 0) x)
	  ((and (number? x) (number? y)) (+ x y))
	  (else (list '+ x y))))
  (put 'deriv '(+)
       (lambda (exp var) 
	 (make-sum (deriv (addend exp) var)
		   (deriv (augend exp) var))))
  'done)

(define (install-product-package)
  (define (make-sum x y) 
    (cond ((=number? x 0) y)
	  ((=number? y 0) x)
	  ((and (number? x) (number? y)) (+ x y))
	  (else (list '+ x y))))
  (define (make-product x y)
    (cond ((or (=number? x 0) (=number? y 0)) 0)
	  ((=number? x 1) y)
	  ((=number? y 1) x)
	  ((and (number? x) (number? y)) (* x y))
	  (else (list ('* x y)))))
  (define (multiplier exp) (car exp))
  (define (multiplcand exp) (cadr exp))
  (put 'deriv '(*)
       (lambda (exp var)
	 (make-sum
	   (make-product (multiplier exp)
			 (deriv (multiplicand exp) var))
	   (make-product (deriv (multiplier exp) var)
			 (multiplicand exp)))))
  'done)

(define (install-exponentiation-package)
  (define (make-exponentiation u n)
      (cond ((=number? u 1) 1)
	            ((=number? n 0) 1)
		            ((=number? n 1) u)
			            (else (list '** u n))))
  (define (make-product x y)
    (cond ((or (=number? x 0) (=number? y 0)) 0)
	  ((=number? x 1) y)
	  ((=number? y 1) x)
	  ((and (number? x) (number? y)) (* x y))
	  (else (list ('* x y)))))
  (put 'deriv '(**)
       (lambda (exp var)
	 (make-product 
	   (make-product (exponent exp)
			 (make-exponentiation (base exp)
					      (if (number? (exponent exp))
						(- (exponent exp) 1)
						(' (- (exponent exp) 1)))))
	   (deriv (base exp) var))))
  'done)
