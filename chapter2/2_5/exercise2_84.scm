(define (apply-generic op . args)
  (define (raise-into s t)
    (let ((stype (type-tag s))
	  (ttype (type-tag t)))
      (cond ((equal? stype ttype) s)
	    ((get 'raise (list s))
	     (raise-into ((get 'raise (list stype)) stype) t))
	    (else false))))
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
	(apply proc (map contents args))
	(if (= (length args) 2)
	  (let ((a1 (car args))
		(a2 (cadr args)))
	    (cond ((raise-into a1 a2)
		   (apply-generic op (raise-into a1 a2) a2))
		  ((raise-into a2 a1)
		   (apply-generic op a1 (raise-into a2 a1)))
		  (else (error "No method for these types" 
			       (list op type-tags)))))
	  (error "No method for these types"
		 (list op type-tags)))))))
